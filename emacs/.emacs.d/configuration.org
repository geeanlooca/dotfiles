#+AUTHOR: Gianluca Marcon
#+TITLE: My Emacs configuration file
#+EMAIL: marcon.gluca@gmail.com
This file is formatted using org-mode, as explained in this [[https://harryrschwartz.com/2016/02/15/switching-to-a-literate-emacs-configuration][blog post.]]

* Quick tips
** [[https://stackoverflow.com/questions/965263/given-an-emacs-command-name-how-would-you-find-key-bindings-and-vice-versa][Given an emacs command name, how would you find key-bindings ? (and vice versa)]]
1. To just find key bindings for a command, you can use emacs help's "where-is" feature
   #+BEGIN_SRC 
 C-h w command-name
   #+END_SRC
   If multiple bindings are set for the command they will all be listed.
2. For the inverse, given a key sequence, you can type
   #+BEGIN_SRC 
       C-h k key-sequence
   #+END_SRC
   to get the command that would run.
3. You can get detailed information about a command, also any non-interactive function defined, by typing
   #+BEGIN_SRC 
        C-h f function-name
   #+END_SRC
   Which will give you detailed information about a function, including any key bindings for it.
   Key-maps are kept in variables, however the key codes are stored in a raw format. Try =C-h v isearch-mode-map= for an example.
4. For more help on getting help, you can type
   #+BEGIN_SRC 
    C-h ?
   #+END_SRC

** awesome-emacs
Cool collection of emacs packages: [[https://github.com/emacs-tw/awesome-emacs][github]]
* Initialization
** Load package manager, add the Melpa registry
   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
     (package-initialize)
   #+END_SRC

** Bootstrap use-package
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
     (require 'use-package)
   #+END_SRC

* Colorschemes
** Custom colorschemes
   #+BEGIN_SRC emacs-lisp
     (use-package lab-themes
       :ensure t
       :init
       :config
       )
   #+END_SRC
   
** Selected theme
#+BEGIN_SRC emacs-lisp
     (load-theme 'leuven t)
#+END_SRC

#+RESULTS:
: t

* evil-mode and such
** evil
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t ;; install the evil package if not installed

       :init ;; tweak evil's configuration before loading it
       (setq evil-want-C-i-jump nil)
       (setq evil-search-module 'evil-search)
       (setq evil-ex-complete-emacs-commands nil)
       (setq evil-vsplit-window-right t)
       (setq evil-split-window-below t)
       (setq evil-shift-round nil)
       (setq evil-want-C-u-scroll t)

       :config ;; tweak evil after loading it
       (evil-mode)

       ;; example how to map a command in normal mode (called 'normal state' in evil)
       (global-unset-key (kbd "C-f"))
        (define-key evil-normal-state-map (kbd "C-f") nil)
       (define-key evil-normal-state-map (kbd ", w") 'evil-window-vsplit)
       (define-key evil-normal-state-map (kbd ", f") 'helm-find-files)

       )
   #+END_SRC

   #+RESULTS:
   : t

** evil-leader
   #+BEGIN_SRC emacs-lisp
     (use-package evil-leader
       :ensure t
       :init
       :config
       (global-evil-leader-mode) ;; enable evil-leader-mode
       (evil-leader/set-leader "<SPC>") ;; use SPACE as a leader key

       ;; mappings
       (evil-leader/set-key
         "s" 'save-buffer
         "d" 'evil-delete-buffer
         "x" 'helm-M-x
         "f" 'helm-find-files
         "TAB" 'mode-line-other-buffer
         "bn" 'evil-next-buffer
         "bp" 'evil-prev-buffer
         "bb" 'helm-buffers-list
         "ws" 'window-split-below-and-move
         "wv" 'window-split-right-and-move
         "wh" 'evil-window-left
         "wj" 'evil-window-down
         "wk" 'evil-window-up
         "wl" 'evil-window-right
         "wd" 'evil-window-delete
         "wD" 'delete-other-windows
         "o" 'helm-occur
         "<SPC>" 'helm-mini
         "eo" 'open-emacs-config
         "er" 'reload-emacs-config
         "pi" 'package-install
         "pr" 'package-refresh-contents
         "kk" 'save-buffers-kill-terminal
         "q" 'save-buffers-kill-terminal
         "G" 'magit-dispatch
         "gg" 'magit-status
         ))
   #+END_SRC

   #+RESULTS:
   : t

** evil-surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+END_SRC
** evil-commentary
#+BEGIN_SRC emacs-lisp 
  (use-package evil-commentary
    :ensure t 
    :init 
    :config
    (evil-commentary-mode))
#+END_SRC

#+RESULTS:
: t

* org
[[https://orgmode.org/orgcard.txt][org-mode cheatsheet]]
** init
#+BEGIN_SRC emacs-lisp
  (require 'org)
  (require 'org-mouse)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (setq org-log-done t)
#+END_SRC 

#+RESULTS:
: t

** options
   #+BEGIN_SRC emacs-lisp
     (setq org-src-tab-acts-natively t)
     (setq org-src-fontify-natively t)
     (global-set-key (kbd "C-c i") (kbd "M-TAB"))
   #+END_SRC
   
** indentation
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

** autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package org-ac
    :ensure t
    :init (progn
            (require 'org-ac)
            (org-ac/config-default)
            ))
#+END_SRC
** agenda
#+BEGIN_SRC emacs-lisp
    (setq org-agenda-files (list "~/Dropbox/org/work.org"
                                 "~/Dropbox/org/main.org"
                                   "~/Nextcloud/PhD/org/work.org"))

    (setq org-default-notes-file "~/Dropbox/PhD/org/notes.org")
#+END_SRC

#+RESULTS:
: ~/Dropbox/PhD/org/notes.org

** org-bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t 
       :init 
       :config 
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
       )
   #+END_SRC
   
** org-evil
   #+BEGIN_SRC emacs-lisp
     (use-package org-evil
       :ensure t
       :init
       :config 
       (require 'org-evil)
       )
   #+END_SRC
   
#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :config
    (require 'evil-org)
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC

#+RESULTS:
: t

*** Press 't' in evil normal mode to cycle TODO status on selected heading
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal org-mode-map "t" 'org-todo)
#+END_SRC

*** org-rifle

#+BEGIN_SRC emacs-lisp
	(evil-leader/set-key-for-mode 'org-mode
	  "o" 'helm-org-rifle)
#+END_SRC

#+RESULTS:

** org-babel
*** Do not ask for confirmation when executing code blocks
#+BEGIN_SRC emacs-lisp 
(setq org-confirm-babel-evaluate nil)
#+END_SRC
*** python
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
#+END_SRC
**** Example
- =:results output= makes the =print= command work, otherwise the result will be "None"
- =:session= is used to have a persistent python session between python blocks (kinda like Jupyter Notebooks)
  
#+BEGIN_SRC python :results output :exports both
  def double_value(x):
      return 2*x

  print(double_value(20))
#+END_SRC

#+RESULTS:
: 40

**** TODO Try plotting

** org-ref
*** basic configuration
#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :ensure t
    :init

    (setq reftex-default-bibliography '("~/bib/library.bib"))

    (setq org-ref-bibliography-notes "~/bib/notes.org"
          org-ref-default-bibliography '("~/bib/library.bib")
          org-ref-pdf-directory "~/bib/docs/")

    (setq bibtex-completion-notes-path "~/bib/notes.org"
          bibtex-completion-bibliography "~/bib/library.bib"
          bibtex-completion-library-path "~/bib/docs/")

    (setq bibtex-completion-pdf-open-function
          (lambda (fpath)
            (call-process "okular" nil 0 nil fpath)))

    :config
    (require 'org-ref)

    )
#+END_SRC
*** latex compilation
#+BEGIN_SRC emacs-lisp 
(setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
#+END_SRC
*** TODO open pdfs as stored by mendeley
#+BEGIN_SRC emacs-lisp
(defun my/org-ref-open-pdf-at-point ()
  "Open the pdf for bibtex key under point if it exists."
  (interactive)
  (let* ((results (org-ref-get-bibtex-key-and-file))
         (key (car results))
	 (pdf-file (car (bibtex-completion-find-pdf key))))
    (if (file-exists-p pdf-file)
	(org-open-file pdf-file)
      (message "No PDF found for %s" key))))

(setq org-ref-open-pdf-function 'my/org-ref-open-pdf-at-point)
#+END_SRC

#+RESULTS:
: my/org-ref-open-pdf-at-point
** exports
*** publishing
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; (setq org-publish-project-alist			  ;;
  ;;       '(("org-notes"					  ;;
  ;;          :base-directory "~/org/"			  ;;
  ;;          :publishing-directory "~/public_html/"	  ;;
  ;;          :publishing-function org-twbs-publish-to-html ;;
  ;;          :with-sub-superscript nil			  ;;
  ;;          )))						  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC
*** Twitter bootstrap
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t
    :init
    :config
   )

#+END_SRC

#+RESULTS:

* helm
  #+BEGIN_SRC emacs-lisp
    (use-package helm
      :ensure t
      :init
      :config 
      (helm-mode 1) ;; enables helm 
      ;; substitute emacs functions with helm equivalents
      (global-set-key (kbd "M-x") 'helm-M-x) 
      (global-set-key (kbd "C-x C-f") 'helm-find-files)
      (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
      ;; set up fuzzy finding
      (setq helm-mode-fuzzy-match t)
      (setq helm-completion-in-region-fuzzy-match t)
      ;; open helm in a horizontal split below
      (setq helm-split-window-default-side 'below)
      ;; use Ctrl-J and Ctrl-K to select the entries in helm (more vim-like)
      (define-key helm-map (kbd "C-j") 'helm-next-line)
      (define-key helm-map (kbd "C-k") 'helm-previous-line)

      (define-key helm-find-files-map "\t" 'helm-execute-persistent-action)
      (setq helm-split-window-in-side-p t)
      )
  #+END_SRC

  #+RESULTS:
  : t
  
** helm org rifle
#+BEGIN_SRC emacs-lisp
  (use-package helm-org-rifle
    :ensure t)
#+END_SRC
  
* fzf
#+BEGIN_SRC emacs-lisp
  (use-package fzf
    :ensure t
    :init
    :config
      (global-set-key (kbd "C-f") 'fzf) 
    )
#+END_SRC

#+RESULTS:
: t

* which-key
Emacs package that displays available keybindings in popup 
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (setq which-key-idle-delay 0.5)
    :config 
    (require 'which-key)
    (which-key-mode)
    )
#+END_SRC

#+RESULTS:
: t

* DONE magit
CLOSED: [2019-03-10 dom 01:16]
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    :config 
    )

  (use-package evil-magit
    :ensure t
    :init
    :config 
  (require 'evil-magit)
    )

#+END_SRC
* Searching
** ripgrep 
#+BEGIN_SRC emacs-lisp
  (use-package deadgrep
    :ensure t
    :init
    :config
    (global-set-key (kbd "<f5>") #'deadgrep)
    (global-set-key (kbd "C-c g") #'deadgrep)
    )
#+END_SRC

#+RESULTS:
: t
** ag
#+BEGIN_SRC emacs-lisp
  (use-package helm-ag
    :ensure t
    :init
    :config 
    )
#+END_SRC

#+RESULTS:

** TODO swiper
[[https://github.com/abo-abo/swiper][github repo]]
* LaTeX
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :ensure t

    :defer t
    :config
    (setq TeX-auto-save t))

  (use-package ac-math
    :ensure t
    :config
    (require 'ac-math))

  (use-package auctex-latexmk
    :ensure t)
#+END_SRC

#+RESULTS:

* Snippets
** Load YASnippet
 #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :ensure t
     :init
     :config
     (yas-global-mode 1)
     (setq-default ac-sources (push 'ac-source-yasnippet ac-sources))
     )
 #+END_SRC

** Install a collection of snippets
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet-snippets
       :ensure t
       )
   #+END_SRC
 
* Python
** elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t 
    :init 
    :config 
    (elpy-enable)
(setq elpy-rpc-backend "jedi")  )
#+END_SRC

#+RESULTS:
: t
* Autocompletion
** auto-complete
  #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure
      :init
      :config
      (ac-config-default)
      (global-auto-complete-mode t)
      (setq ac-auto-start t)
      (setq ac-auto-show-menu t)
      (auto-complete-mode 1)
      (setq tab-always-indent 'complete)
      (add-to-list 'ac-modes 'org-mode)
      (add-to-list 'ac-modes 'latex-mode)
      )
  #+END_SRC

  #+RESULTS:
  : t

** TODO company-mode
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; (use-package company				       ;;
  ;;   :ensure t					       ;;
  ;;   :init					       ;;
  ;;   :config					       ;;
  ;;   (add-hook 'after-init-hook 'global-company-mode)) ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

* Misc. options
** Smart Mode Line
   Smart Mode Line is a sexy mode-line for Emacs. It aims to be easy to read from small to large monitors by using colors, a prefix feature, and smart truncation.

   #+BEGIN_SRC emacs-lisp
     (use-package smart-mode-line
       :ensure t
       :init
       (setq powerline-default-separator-dir '(right . left))
       :config
          (add-hook 'after-init-hook 'sml/setup))
   #+END_SRC
   

   
   #+RESULTS:
   : t
*** TODO Figure out how to set a decent theme like in spacemacs
** Google search
#+BEGIN_SRC emacs-lisp
  (use-package google-this
    :ensure t
    :init
    :config
    (google-this-mode 1)
    (global-set-key (kbd "C-c s") 'google-this-mode-submap)
    )
#+END_SRC

** Beacon
Highlights cursor position when moving around files/windows
   #+BEGIN_SRC emacs-lisp
     (use-package beacon
       :ensure t
       :config (beacon-mode 1))
   #+END_SRC

** Follow symlink 
#+BEGIN_SRC emacs-lisp
(setq find-file-visit-truename t)
#+END_SRC

#+RESULTS:
: t

** Replace yes-or-no with y-or-n
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Font
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'default-frame-alist '(font . "Fira Code-14" ))
     (set-face-attribute 'default t :font "Fira Code-14" )
   #+END_SRC

** Wrap lines
   #+BEGIN_SRC emacs-lisp
     (global-visual-line-mode t)
   #+END_SRC
** Make ESC act as Ctrl+g to cancel operations
   #+BEGIN_SRC emacs-lisp
     (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
   #+END_SRC
** Show matching parens
#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay 0)
(show-paren-mode 1)
#+END_SRC
* Dumb packages 
** lorem-ipsum
#+BEGIN_SRC emacs-lisp
  (use-package lorem-ipsum
    :ensure t 
    :config
    )
#+END_SRC

