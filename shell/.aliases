# Directories and files

alias green="cd /media/green/"
alias red1="cd /media/red1/"
alias red2="cd /media/red2/"
alias gdocs="cd /media/green/Docs"

alias dbox='cd ~/Dropbox'
alias phd='cd ~/Nextcloud/PhD/'
alias res='cd ~/Nextcloud/PhD/research'
alias phc='cd ~/Nextcloud/PhD/courses'
alias repo='cd ~/Documents/repos'
alias papers='cd ~/Nextcloud/PhD/bib/docs'

# Configuration files
alias zload='source ~/.zshrc'
alias bload='source ./.bashrc'

alias cfg-tmux='vim ~/.tmux.conf'
alias zrc='vim ~/.zshrc'
alias vrc='vim ~/.vimrc'
alias i3c='vim ~/dotfiles/i3config'
alias elias='vim ~/.aliases'

# Random shortcuts
alias emacs='emacs -nw'
# alias o='a -e xdg-open'
# alias e='f -e vim'
alias of="fzf | xargs -d '\n' -r xdg-open"
alias ef="fzf | xargs -d '\n' -r vim"
alias c='clear'
alias q='dirs -v | head -10'
alias :q='exit'
alias ls='ls --color=auto'
alias sl='ls'
alias ace='acestream-launcher -p mpv '
alias tv="ls -t /media/green/Telefilm/**/*.{mkv,mp4} | fzf | xargs -r -0 xdg-open"


alias img='sxiv -a'
alias descr='tree . -d | less'
alias desc='tree . -d'
alias fm="pwd | xargs -d '\n' -r xdg-open"

# Conda 
alias jn='jupyter-notebook'
alias ce='conda env export > environment.yml'
alias ccf='conda env create -f environment.yml'
alias cde='conda deactivate'

cac() {
    # deactivate the current environment
    CONDA_ENV=$(conda env list | awk 'FNR > 2 {print $1}' | fzf)

    if [ -z "$CONDA_ENV" ]
    then
        # don't do anything
    else
        conda deactivate 
        conda activate $CONDA_ENV
    fi
}

#############
# Functions #
#############

# Cheatsheets
cs() {
    case "$1" in
        tmux)
            xdg-open http://tmuxcheatsheet.com/
            ;;
        conda)
            xdg-open https://conda.io/docs/_downloads/conda-cheatsheet%202019.pdf
            ;;
        *)
            curl cheat.sh/$1
            ;;
    esac
}

# Weather
weather() {
    curl "wttr.in/${1}"
}

meteo(){
    weather $1
}

# Open tomb archives
tombopen() {
    tomb open "${1}.tomb" -k "${1}.tomb.key" -f
    cd "/media/${1}"
    xdg-open "/media/${1}"
}


# Open ssh connection to the departments' network
deilogin(){
    sshpass -f ~/.deipw ssh -o StrictHostKeyChecking=no marcongi@login.dei.unipd.it
}

blade-queue(){

    # parse argument
    if [ $# -eq 0 ]; then
        DIR=.
    else
        DIR=$1
    fi
    
    # assume the first argument is the directory containing the job to execute
    # copy the directory to the blade gateway
    JOB_DIR=$(readlink -f $DIR)
    JOB_FILE=$JOB_DIR/main.job

    if [ ! -f $JOB_FILE ]; then
        echo "main.job file is missing!"
    else
        BASE_DIR=$(basename $JOB_DIR)
        BLADE_DIR="~/blade/jobs/${BASE_DIR}"
        JOB_FILE="${BLADE_DIR}/main.job"
        mkdir -p "${JOB_DIR}/results"

        echo "Copying files to DEI's ssh login machine..."

        # REPLACE WITH RSYNC
        # sshpass -f ~/.deipw scp -o StrictHostKeyChecking=no -r $JOB_DIR  marcongi@login.dei.unipd.it:/home/marcongi/blade/jobs/

        sshpass -f ~/.deipw rsync --progress -avz -e ssh "${JOB_DIR}"  marcongi@login.dei.unipd.it:/home/marcongi/blade/jobs

        # enqueu the job
        cmd="cd ${BLADE_DIR}; qsub main.job";
        echo $cmd | sshpass -f ~/.deipw ssh -T -o StrictHostKeyChecking=no marcongi@login.dei.unipd.it
    fi
}

blade-fetch(){

    # parse argument
    if [ $# -eq 0 ]; then
        DIR=.
    else
        DIR=$1
    fi

    # assume the first argument is the directory containing the job to execute
    # copy the directory to the blade gateway
    JOB_DIR=$(readlink -f $DIR)
    BASE_DIR=$(basename $JOB_DIR)
    BLADE_DIR=/home/marcongi/blade/jobs/$BASE_DIR/results
    LOCAL_DIR=$JOB_DIR

    # use rsync to copy the content of the "/results" folder 
    echo "Downloading ${BLADE_DIR} to ${LOCAL_DIR}..."
    sshpass -f ~/.deipw rsync --progress -avz -e ssh  marcongi@login.dei.unipd.it:$BLADE_DIR $LOCAL_DIR

}

blade-upload(){
    # parse argument
    if [ $# -eq 0 ]; then
        DIR=.
    else
        DIR=$1
    fi

    # assume the first argument is the directory containing the job to execute
    # copy the directory to the blade gateway
    JOB_DIR=$(readlink -f $DIR)
    BASE_DIR=$(basename $JOB_DIR)
    BLADE_DIR=/home/marcongi/blade/jobs/$BASE_DIR/
    LOCAL_DIR=$JOB_DIR

    echo $JOB_DIR
    echo $BASE_DIR
    echo $LOCAL_DIR
    echo $BLADE_DIR

    # use rsync to copy the content of the folder to blade's login server
    echo "Downloading ${BLADE_DIR} to ${LOCAL_DIR}..."
    sshpass -f ~/.deipw rsync --progress -avz -e ssh $LOCAL_DIR marcongi@login.dei.unipd.it:$BLADE_DIR 


}

cloudlogin(){
    ssh gmarcon@gate.cloudveneto.it
}


# Rename, move, and download subtitles for TV shows
tv-sort(){
    
    ARCHIVE_DIR=/media/green/Telefilm

    filebot -rename *.mkv --format "${ARCHIVE_DIR}/{n}/Season {s.pad(2)}/{n} - {S00E00}" -non-strict
}

subs-download(){
    subliminal download -l en -l it -a 7d /media/green/Telefilm/**
}

pse(){
    ps -e | grep -i $1
}

# Because typing "cd .." repeatedly is boring.
up() {
  local x='';
  for i in $(seq ${1:-1}); do
    x="$x../";
  done;
  cd $x;
}


